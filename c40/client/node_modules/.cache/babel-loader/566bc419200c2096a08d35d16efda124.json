{"ast":null,"code":"import _toConsumableArray from \"/home/bambang/Desktop/rubicamp/redux/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { ADD_DATA, EDIT_DATA, DELETE_DATA, DELETE_ALL, LOAD_PHONEBOOKS_SUCESS, LOAD_PHONEBOOKS_FAILURE, ADD_PHONEBOOKS_SUCESS, ADD_PHONEBOOKS_FAILURE, EDIT_PHONEBOOKS_SUCESS, EDIT_PHONEBOOKS_FAILURE, DELETE_PHONEBOOKS_SUCESS, DELETE_PHONEBOOKS_FAILURE } from '../constants/ActionTypes';\nexport default function data() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_PHONEBOOKS_SUCESS:\n      var phonebooks = state;\n      var idObject = phonebooks.map(function (x) {\n        return x._id;\n      }).indexOf(parseInt(action.phonebook._id));\n\n      if (idObject > -1) {\n        return state;\n      } else {\n        return [action.phonebook].concat(_toConsumableArray(state));\n      }\n\n    case LOAD_PHONEBOOKS_SUCESS:\n      return action.phonebooks;\n\n    case ADD_DATA:\n      return [{\n        _id: action._id,\n        name: action.name,\n        phone: action.phone\n      }].concat(_toConsumableArray(state));\n\n    case EDIT_DATA:\n      return state.map(function (data) {\n        return data._id === action._id ? Object.assign({}, data, {\n          name: action.name,\n          phone: action.phone\n        }) : data;\n      });\n\n    case DELETE_DATA:\n      return state.filter(function (data) {\n        return data._id !== action._id;\n      });\n\n    case DELETE_ALL:\n      return [];\n\n    case LOAD_PHONEBOOKS_FAILURE:\n      return state;\n\n    case EDIT_PHONEBOOKS_SUCESS:\n      return state.map(function (data) {\n        return data._id === action._id ? Object.assign({}, data, {\n          name: action.name,\n          phone: action.phone\n        }) : data;\n      });\n\n    case DELETE_PHONEBOOKS_SUCESS:\n      return state.filter(function (data) {\n        return data._id !== action._id;\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/bambang/Desktop/rubicamp/redux/client/src/reducers/app.js"],"names":["ADD_DATA","EDIT_DATA","DELETE_DATA","DELETE_ALL","LOAD_PHONEBOOKS_SUCESS","LOAD_PHONEBOOKS_FAILURE","ADD_PHONEBOOKS_SUCESS","ADD_PHONEBOOKS_FAILURE","EDIT_PHONEBOOKS_SUCESS","EDIT_PHONEBOOKS_FAILURE","DELETE_PHONEBOOKS_SUCESS","DELETE_PHONEBOOKS_FAILURE","data","state","action","type","phonebooks","idObject","map","x","_id","indexOf","parseInt","phonebook","name","phone","Object","assign","filter"],"mappings":";AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,WAA7B,EAA0CC,UAA1C,EAAsDC,sBAAtD,EAA8EC,uBAA9E,EAAuGC,qBAAvG,EAA8HC,sBAA9H,EAAsJC,sBAAtJ,EAA8KC,uBAA9K,EAAuMC,wBAAvM,EAAiOC,yBAAjO,QAAiQ,0BAAjQ;AAEA,eAAe,SAASC,IAAT,GAAiC;AAAA,MAAnBC,KAAmB,uEAAX,EAAW;AAAA,MAAPC,MAAO;;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,qBAAL;AACA,UAAIU,UAAU,GAAGH,KAAjB;AACA,UAAII,QAAQ,GAAGD,UAAU,CAACE,GAAX,CAAe,UAASC,CAAT,EAAW;AACvC,eAAOA,CAAC,CAACC,GAAT;AACD,OAFc,EAEZC,OAFY,CAEJC,QAAQ,CAACR,MAAM,CAACS,SAAP,CAAiBH,GAAlB,CAFJ,CAAf;;AAGA,UAAGH,QAAQ,GAAG,CAAC,CAAf,EAAiB;AACf,eAAOJ,KAAP;AACD,OAFD,MAEK;AACH,gBAAQC,MAAM,CAACS,SAAf,4BAA6BV,KAA7B;AACD;;AACD,SAAKT,sBAAL;AACA,aAAOU,MAAM,CAACE,UAAd;;AACA,SAAKhB,QAAL;AACA,cACE;AACEoB,QAAAA,GAAG,EAAEN,MAAM,CAACM,GADd;AAEEI,QAAAA,IAAI,EAAEV,MAAM,CAACU,IAFf;AAGEC,QAAAA,KAAK,EAAEX,MAAM,CAACW;AAHhB,OADF,4BAMKZ,KANL;;AAQA,SAAKZ,SAAL;AACA,aAAOY,KAAK,CAACK,GAAN,CAAU,UAAAN,IAAI;AAAA,eAAIA,IAAI,CAACQ,GAAL,KAAaN,MAAM,CAACM,GAApB,GAA0BM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,IAAlB,EAAwB;AAACY,UAAAA,IAAI,EAAEV,MAAM,CAACU,IAAd;AAAoBC,UAAAA,KAAK,EAAEX,MAAM,CAACW;AAAlC,SAAxB,CAA1B,GAA8Fb,IAAlG;AAAA,OAAd,CAAP;;AACA,SAAKV,WAAL;AACA,aAAOW,KAAK,CAACe,MAAN,CAAa,UAAAhB,IAAI;AAAA,eAAIA,IAAI,CAACQ,GAAL,KAAaN,MAAM,CAACM,GAAxB;AAAA,OAAjB,CAAP;;AAEA,SAAKjB,UAAL;AACA,aAAO,EAAP;;AAEA,SAAKE,uBAAL;AACA,aAAOQ,KAAP;;AAEA,SAAKL,sBAAL;AACA,aAAOK,KAAK,CAACK,GAAN,CAAU,UAAAN,IAAI;AAAA,eAAIA,IAAI,CAACQ,GAAL,KAAaN,MAAM,CAACM,GAApB,GAA0BM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,IAAlB,EAAwB;AAACY,UAAAA,IAAI,EAAEV,MAAM,CAACU,IAAd;AAAoBC,UAAAA,KAAK,EAAEX,MAAM,CAACW;AAAlC,SAAxB,CAA1B,GAA8Fb,IAAlG;AAAA,OAAd,CAAP;;AAEA,SAAKF,wBAAL;AACA,aAAOG,KAAK,CAACe,MAAN,CAAa,UAAAhB,IAAI;AAAA,eAAIA,IAAI,CAACQ,GAAL,KAAaN,MAAM,CAACM,GAAxB;AAAA,OAAjB,CAAP;;AAEA;AACA,aAAOP,KAAP;AAxCF;AA2CD","sourcesContent":["import {ADD_DATA, EDIT_DATA, DELETE_DATA, DELETE_ALL, LOAD_PHONEBOOKS_SUCESS, LOAD_PHONEBOOKS_FAILURE, ADD_PHONEBOOKS_SUCESS, ADD_PHONEBOOKS_FAILURE, EDIT_PHONEBOOKS_SUCESS, EDIT_PHONEBOOKS_FAILURE, DELETE_PHONEBOOKS_SUCESS, DELETE_PHONEBOOKS_FAILURE} from '../constants/ActionTypes'\n\nexport default function data(state = [], action){\n  switch (action.type) {\n    case ADD_PHONEBOOKS_SUCESS:\n    let phonebooks = state\n    let idObject = phonebooks.map(function(x){\n      return x._id\n    }).indexOf(parseInt(action.phonebook._id))\n    if(idObject > -1){\n      return state\n    }else{\n      return [action.phonebook, ...state]\n    }\n    case LOAD_PHONEBOOKS_SUCESS:\n    return action.phonebooks\n    case ADD_DATA:\n    return [\n      {\n        _id: action._id,\n        name: action.name,\n        phone: action.phone\n      },\n      ...state\n    ]\n    case EDIT_DATA:\n    return state.map(data => data._id === action._id ? Object.assign({}, data, {name: action.name, phone: action.phone}) : data)\n    case DELETE_DATA:\n    return state.filter(data => data._id !== action._id)\n\n    case DELETE_ALL:\n    return []\n\n    case LOAD_PHONEBOOKS_FAILURE:\n    return state\n\n    case EDIT_PHONEBOOKS_SUCESS:\n    return state.map(data => data._id === action._id ? Object.assign({}, data, {name: action.name, phone: action.phone}) : data)\n\n    case DELETE_PHONEBOOKS_SUCESS:\n    return state.filter(data => data._id !== action._id)\n\n    default:\n    return state\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}